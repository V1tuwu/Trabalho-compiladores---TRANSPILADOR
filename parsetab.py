
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND COLON COMMA DIVIDE ELSE EQUALS GREATER IF LESS LPAREN MINUS NAME NUMBER OR PLUS PRINT RPAREN STRING TIMESexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression TIMES expressionexpression : expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : expression AND expressionexpression : expression OR expression'
    
_lr_action_items = {'LPAREN':([0,2,4,5,6,7,8,9,],[2,2,2,2,2,2,2,2,]),'NUMBER':([0,2,4,5,6,7,8,9,],[3,3,3,3,3,3,3,3,]),'$end':([1,3,11,12,13,14,15,16,17,],[0,-6,-1,-2,-3,-4,-7,-8,-5,]),'PLUS':([1,3,10,11,12,13,14,15,16,17,],[4,-6,4,-1,-2,-3,-4,4,4,-5,]),'MINUS':([1,3,10,11,12,13,14,15,16,17,],[5,-6,5,-1,-2,-3,-4,5,5,-5,]),'TIMES':([1,3,10,11,12,13,14,15,16,17,],[6,-6,6,6,6,-3,-4,6,6,-5,]),'DIVIDE':([1,3,10,11,12,13,14,15,16,17,],[7,-6,7,7,7,-3,-4,7,7,-5,]),'AND':([1,3,10,11,12,13,14,15,16,17,],[8,-6,8,-1,-2,-3,-4,8,8,-5,]),'OR':([1,3,10,11,12,13,14,15,16,17,],[9,-6,9,-1,-2,-3,-4,9,9,-5,]),'RPAREN':([3,10,11,12,13,14,15,16,17,],[-6,17,-1,-2,-3,-4,-7,-8,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,5,6,7,8,9,],[1,10,11,12,13,14,15,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','Transpiler.py',68),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','Transpiler.py',72),
  ('expression -> expression TIMES expression','expression',3,'p_expression_times','Transpiler.py',76),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_divide','Transpiler.py',80),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','Transpiler.py',84),
  ('expression -> NUMBER','expression',1,'p_expression_number','Transpiler.py',88),
  ('expression -> expression AND expression','expression',3,'p_expression_and','Transpiler.py',92),
  ('expression -> expression OR expression','expression',3,'p_expression_or','Transpiler.py',96),
]
